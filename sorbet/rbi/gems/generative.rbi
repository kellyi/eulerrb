# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/generative/all/generative.rbi
#
# generative-0.2.4

class RSpec::Core::ExampleGroup
  def generate(generator_name, *args); end
  def self.data(name, &block); end
  def self.for_every(name, &block); end
  def self.generative(*args, &example_group_block); end
end
module RSpec
  def self.generative(*args, &example_group_block); end
end
class Module
end
class RSpec::Core::Formatters::ProgressFormatter < RSpec::Core::Formatters::BaseTextFormatter
  def super_example_passed(_notification); end
end
module Generative
  def self.find_and_call(*args, &block); end
  def self.generate(generator_name, *args); end
  def self.manager; end
  def self.preregistered_generators; end
  def self.register_generator(*args, &block); end
  def self.running?; end
end
class Generative::Formatter < RSpec::Core::Formatters::DocumentationFormatter
  def detail_color(text); end
  def example_failed(notification); end
  def example_group_started(notification); end
  def example_passed(notification); end
  def example_pending(notification); end
  def generative?(example); end
  def initialize(output); end
end
class Generative::InvalidGenerator < StandardError
end
class Generative::UnregisteredGenerator < StandardError
end
class Generative::GeneratorManager
  def find_and_call(name, *args); end
  def generator_valid?(generator); end
  def generators; end
  def initialize(preregistered_generators = nil); end
  def register_generator(name, factory = nil, &generator); end
end
